
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001f8  2**0
                  ALLOC
  2 .debug_aranges 00000050  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000083  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000036c  00000000  00000000  000002cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a4  00000000  00000000  00000637  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000355  00000000  00000000  000007db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000172  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b4  00000000  00000000  00000d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  00000db6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a4 36       	cpi	r26, 0x64	; 100
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	a1 c0       	rjmp	.+322    	; 0x180 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
#include <util/delay.h>
#include "tinytouchlib.h"

int main(void)
{
	CLKPR=_BV(CLKPCE);
  40:	80 e8       	ldi	r24, 0x80	; 128
  42:	86 bd       	out	0x26, r24	; 38
	CLKPR=0;			// set clock prescaler to 1 (attiny 25/45/85/24/44/84/13/13A)		
  44:	16 bc       	out	0x26, r1	; 38

	DDRB=_BV(PB3);		// Enable LED output pin
  46:	88 e0       	ldi	r24, 0x08	; 8
  48:	87 bb       	out	0x17, r24	; 23
	
	tinytouch_init();
  4a:	8d d0       	rcall	.+282    	; 0x166 <tinytouch_init>
	
	while(1) {
		if (tinytouch_sense()==tt_on) {PORTB |= _BV(PB3);}      // Toggle LED on touch event
  4c:	2d d0       	rcall	.+90     	; 0xa8 <tinytouch_sense>
  4e:	81 30       	cpi	r24, 0x01	; 1
  50:	11 f4       	brne	.+4      	; 0x56 <main+0x16>
  52:	c3 9a       	sbi	0x18, 3	; 24
  54:	fb cf       	rjmp	.-10     	; 0x4c <main+0xc>
		else PORTB &= ~_BV(PB3);
  56:	c3 98       	cbi	0x18, 3	; 24
  58:	f9 cf       	rjmp	.-14     	; 0x4c <main+0xc>

0000005a <tinytouch_adc>:
uint8_t tinytouch_adc(void) {	

	uint8_t dat1,dat2;

	// Precharge Low
	ADMUX	=tt_refadc;	// connect S/H cap to reference pin	
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	87 b9       	out	0x07, r24	; 7
	PORTB |= _BV(tt_refpin);		// Charge S/H Cap 
  5e:	c2 9a       	sbi	0x18, 2	; 24
	PORTB &=~_BV(tt_sensepin);		// Discharge Pad (0)
  60:	c4 98       	cbi	0x18, 4	; 24
	DDRB  |= _BV(tt_refpin)|_BV(tt_sensepin);
  62:	87 b3       	in	r24, 0x17	; 23
  64:	84 61       	ori	r24, 0x14	; 20
  66:	87 bb       	out	0x17, r24	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  68:	85 e5       	ldi	r24, 0x55	; 85
  6a:	8a 95       	dec	r24
  6c:	f1 f7       	brne	.-4      	; 0x6a <tinytouch_adc+0x10>
		
	_delay_us(32);
	
	DDRB  &=~(_BV(tt_sensepin));	// float pad input, note that pull up is off.
  6e:	bc 98       	cbi	0x17, 4	; 23

#ifdef __AVR_ATtiny10__
	ADMUX	=tt_senseadc;	// Connect sense input to adc
#else
	ADMUX	=tt_senseadc|_BV(ADLAR);	// Connect sense input to adc
  70:	82 e2       	ldi	r24, 0x22	; 34
  72:	87 b9       	out	0x07, r24	; 7
#endif
		
	ADCSRA	|=_BV(ADSC); // Start conversion	
  74:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA&_BV(ADIF)));		
  76:	34 9b       	sbis	0x06, 4	; 6
  78:	fe cf       	rjmp	.-4      	; 0x76 <tinytouch_adc+0x1c>
	ADCSRA	|=_BV(ADIF); // Clear ADIF
  7a:	34 9a       	sbi	0x06, 4	; 6

#ifdef __AVR_ATtiny10__
	dat1=ADCL;
#else
	dat1 = ADCH;
  7c:	95 b1       	in	r25, 0x05	; 5
	//dat1 = ADCL;  //read low byte first
	//dat1 += (ADCH<<8); //high byte
#endif

	// Precharge High
	ADMUX  =tt_refadc;	// connect S/H cap to reference pin
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	87 b9       	out	0x07, r24	; 7
	PORTB &=~_BV(tt_refpin);		// Discharge S/H Cap
  82:	c2 98       	cbi	0x18, 2	; 24
	PORTB |= _BV(tt_sensepin);		// Charge Pad 
  84:	c4 9a       	sbi	0x18, 4	; 24
	DDRB  |= _BV(tt_refpin)|_BV(tt_sensepin);
  86:	87 b3       	in	r24, 0x17	; 23
  88:	84 61       	ori	r24, 0x14	; 20
  8a:	87 bb       	out	0x17, r24	; 23
  8c:	85 e5       	ldi	r24, 0x55	; 85
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <tinytouch_adc+0x34>
			
	_delay_us(32);

	DDRB  &=~(_BV(tt_sensepin));	// float pad input input
  92:	bc 98       	cbi	0x17, 4	; 23
	PORTB &=~_BV(tt_sensepin);		// pull up off
  94:	c4 98       	cbi	0x18, 4	; 24

#ifdef __AVR_ATtiny10__
	ADMUX	=tt_senseadc;	// Connect sense input to adc
#else
	ADMUX	=tt_senseadc|_BV(ADLAR);	// Connect sense input to adc
  96:	82 e2       	ldi	r24, 0x22	; 34
  98:	87 b9       	out	0x07, r24	; 7
#endif
							
	ADCSRA	|=_BV(ADSC); // Start conversion	
  9a:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA&_BV(ADIF)));
  9c:	34 9b       	sbis	0x06, 4	; 6
  9e:	fe cf       	rjmp	.-4      	; 0x9c <tinytouch_adc+0x42>
	ADCSRA	|=_BV(ADIF); // Clear ADIF
  a0:	34 9a       	sbi	0x06, 4	; 6

#ifdef __AVR_ATtiny10__
	dat2=ADCL;
#else
	dat2 = ADCH;
  a2:	85 b1       	in	r24, 0x05	; 5
	//dat2 += (ADCH<<8); //high byte
#endif
	

	return dat2-dat1;
}
  a4:	89 1b       	sub	r24, r25
  a6:	08 95       	ret

000000a8 <tinytouch_sense>:
		
	bias=tinytouch_adc()<<8;
	touch=0;
}

uint8_t tinytouch_sense(void) {
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	10 e0       	ldi	r17, 0x00	; 0
  b4:	c0 e0       	ldi	r28, 0x00	; 0
  b6:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b8:	68 ec       	ldi	r22, 0xC8	; 200
  ba:	e6 2e       	mov	r14, r22
  bc:	f1 2c       	mov	r15, r1
	uint16_t tmp;
	int16_t delta;

	tmp=0;
	for (i=0; i<16; i++) {
		tmp+=tinytouch_adc();	// average 16 samples
  be:	cd df       	rcall	.-102    	; 0x5a <tinytouch_adc>
  c0:	c8 0f       	add	r28, r24
  c2:	d1 1d       	adc	r29, r1
  c4:	c7 01       	movw	r24, r14
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <tinytouch_sense+0x1e>
	uint8_t i;
	uint16_t tmp;
	int16_t delta;

	tmp=0;
	for (i=0; i<16; i++) {
  ca:	1f 5f       	subi	r17, 0xFF	; 255
  cc:	10 31       	cpi	r17, 0x10	; 16
  ce:	b9 f7       	brne	.-18     	; 0xbe <tinytouch_sense+0x16>
		tmp+=tinytouch_adc();	// average 16 samples
		_delay_us(100);
	}

	delta=tmp-(bias>>4);
  d0:	20 91 62 00 	lds	r18, 0x0062
  d4:	30 91 63 00 	lds	r19, 0x0063
  d8:	c9 01       	movw	r24, r18
  da:	54 e0       	ldi	r21, 0x04	; 4
  dc:	96 95       	lsr	r25
  de:	87 95       	ror	r24
  e0:	5a 95       	dec	r21
  e2:	e1 f7       	brne	.-8      	; 0xdc <tinytouch_sense+0x34>
  e4:	ae 01       	movw	r20, r28
  e6:	48 1b       	sub	r20, r24
  e8:	59 0b       	sbc	r21, r25
	
			
	if (!touch)	{
  ea:	80 91 60 00 	lds	r24, 0x0060
  ee:	88 23       	and	r24, r24
  f0:	f1 f4       	brne	.+60     	; 0x12e <tinytouch_sense+0x86>
		if (delta>touch_threshold_on) {
  f2:	40 31       	cpi	r20, 0x10	; 16
  f4:	51 05       	cpc	r21, r1
  f6:	3c f0       	brlt	.+14     	; 0x106 <tinytouch_sense+0x5e>
			touch=1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 60 00 	sts	0x0060, r24
#if touch_timeout>0
			timer=0;					
  fe:	10 92 61 00 	sts	0x0061, r1
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	2a c0       	rjmp	.+84     	; 0x15a <tinytouch_sense+0xb2>
#endif
			return tt_push;
		}

		// update bias only when touch not active
		bias=(bias-(bias>>6))+(tmp>>2);		// IIR low pass
 106:	c9 01       	movw	r24, r18
 108:	46 e0       	ldi	r20, 0x06	; 6
 10a:	96 95       	lsr	r25
 10c:	87 95       	ror	r24
 10e:	4a 95       	dec	r20
 110:	e1 f7       	brne	.-8      	; 0x10a <tinytouch_sense+0x62>
 112:	28 1b       	sub	r18, r24
 114:	39 0b       	sbc	r19, r25
 116:	d6 95       	lsr	r29
 118:	c7 95       	ror	r28
 11a:	d6 95       	lsr	r29
 11c:	c7 95       	ror	r28
 11e:	2c 0f       	add	r18, r28
 120:	3d 1f       	adc	r19, r29
 122:	30 93 63 00 	sts	0x0063, r19
 126:	20 93 62 00 	sts	0x0062, r18
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	16 c0       	rjmp	.+44     	; 0x15a <tinytouch_sense+0xb2>
		return tt_off;		
	} else {
		if (delta<touch_threshold_off) {
 12e:	44 31       	cpi	r20, 0x14	; 20
 130:	51 05       	cpc	r21, r1
 132:	24 f4       	brge	.+8      	; 0x13c <tinytouch_sense+0x94>
			touch=0;
 134:	10 92 60 00 	sts	0x0060, r1
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	0f c0       	rjmp	.+30     	; 0x15a <tinytouch_sense+0xb2>
			return tt_release;
		}

#if touch_timeout>0		
		if (timer==touch_timeout) {
 13c:	80 91 61 00 	lds	r24, 0x0061
 140:	8f 3f       	cpi	r24, 0xFF	; 255
 142:	39 f4       	brne	.+14     	; 0x152 <tinytouch_sense+0xaa>
			bias=tinytouch_adc()<<8;			
 144:	8a df       	rcall	.-236    	; 0x5a <tinytouch_adc>
 146:	10 92 62 00 	sts	0x0062, r1
 14a:	80 93 63 00 	sts	0x0063, r24
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	04 c0       	rjmp	.+8      	; 0x15a <tinytouch_sense+0xb2>
			return tt_timeout;
		} 
		timer++;
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	80 93 61 00 	sts	0x0061, r24
 158:	81 e0       	ldi	r24, 0x01	; 1
#endif						
		return tt_on;
	}
}	
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	08 95       	ret

00000166 <tinytouch_init>:
*/	

void	tinytouch_init(void) {

#ifndef __AVR_ATtiny13__	
	PRR		&=~_BV(PRADC);
 166:	80 b5       	in	r24, 0x20	; 32
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	80 bd       	out	0x20, r24	; 32
#endif	
	ADCSRA	=_BV(ADEN)|_BV(ADPS2)|_BV(ADPS0); // Enable ADC, Set prescaler to 32
 16c:	85 e8       	ldi	r24, 0x85	; 133
 16e:	86 b9       	out	0x06, r24	; 6
		
	bias=tinytouch_adc()<<8;
 170:	74 df       	rcall	.-280    	; 0x5a <tinytouch_adc>
 172:	10 92 62 00 	sts	0x0062, r1
 176:	80 93 63 00 	sts	0x0063, r24
	touch=0;
 17a:	10 92 60 00 	sts	0x0060, r1
}
 17e:	08 95       	ret

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
